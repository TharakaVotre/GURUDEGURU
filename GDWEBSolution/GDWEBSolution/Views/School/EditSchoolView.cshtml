@model GDWEBSolution.Models.Schools.SchoolModel

@{
    ViewBag.Title = "Grade";
}


   

    <div >
        @using (Html.BeginForm("Edit", "School",
    FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @*<form id="FrmANT" class="form-horizontal">*@
            <div class="form-horizontal">


                @*<form id="FrmANT" action="/School/Create"
                    enctype="multipart/form-data"
                    method="post"
                    >*@
                <br />
                <div class="form-group">

                    @Html.LabelFor(m => m.SchoolId, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(model => model.SchoolId, new { @class = "form-control", @placeholder = "School Id", @readonly = "readonly" })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.SchoolName, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-8">
                        @Html.TextBoxFor(model => model.SchoolName, new { @class = "form-control", @placeholder = "School Name" })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.SchoolCategory, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.SchoolCategory, ViewBag.SchoolCategoryDrpDown as SelectList, "", new { @class = "form-control", @placeholder = "Name of School type" })
                    </div>
                    <div class="col-sm-2">
                        @Html.ValidationMessageFor(model => model.SchoolCategory, null, new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(m => m.Province, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.Province, ViewBag.ProvinceDrpDown as SelectList, "", new { @class = "form-control", @placeholder = "Province" })
                    </div>
                    <div class="col-sm-2">
                        @Html.ValidationMessageFor(model => model.Province, null, new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SchoolGroup, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.SchoolGroup, ViewBag.SGroupDrpDown as SelectList, "", new { @class = "form-control", @placeholder = "School Group" })
                    </div>
                    <div class="col-sm-2">
                        @Html.ValidationMessageFor(model => model.SchoolGroup, null, new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.District, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.District, ViewBag.DistrictDrpDown as SelectList, "", new { @class = "form-control", @placeholder = "School Group" })
                    </div>
                    <div class="col-sm-2">
                        @Html.ValidationMessageFor(model => model.SchoolGroup, null, new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Division, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.Division, ViewBag.DivisionDrpDown as SelectList, "", new { @class = "form-control", @placeholder = "School Group" })
                    </div>
                    <div class="col-sm-2">
                        @Html.ValidationMessageFor(model => model.SchoolGroup, null, new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.SchoolRank, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.DropDownListFor(model => model.SchoolRank, ViewBag.RankDrpDown as SelectList, "", new { @class = "form-control", @placeholder = "School Group" })
                    </div>
                    <div class="col-sm-2">
                        @Html.ValidationMessageFor(model => model.SchoolGroup, null, new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(m => m.Address1, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-6">
                        @Html.TextBoxFor(model => model.Address1, new { @class = "form-control input-lg mb", @placeholder = "Address " })
                        @Html.TextBoxFor(model => model.Address2, new { @class = "form-control mb", @placeholder = "Address **" })
                        @Html.TextBoxFor(model => model.Address3, new { @class = "form-control input-sm", @placeholder = "Address **" })

                    </div>
                </div>


                <div class="form-group">
                    @Html.LabelFor(m => m.Telephone, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.Telephone, new { @class = "form-control", @placeholder = "Telephone No" })

                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.MinuteforPeriod, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-4">
                        @Html.TextBoxFor(model => model.MinuteforPeriod, new { @class = "form-control", @placeholder = "Minutes for a Period" })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.File, new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.File, new { type = "file", @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.File, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LogoFile, new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.TextBoxFor(m => m.LogoFile, new { type = "file", @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.File, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    @Html.LabelFor(m => m.WebAddress, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-6">
                        @Html.TextBoxFor(model => model.WebAddress, new { @class = "form-control", @placeholder = "School Website Names" })

                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.Email, new { @class = "col-sm-2 control-label" })
                    <div class="col-sm-6">
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @placeholder = "Email Address" })
                        <span class="help-block m-b-none" id="CategoryNameError"></span>
                    </div>
                </div>






                <div class="form-group">


                    @* @Html.HiddenFor(m=>m.Name)*@
                    @*        @Html.DropDownListFor(model => model.DepartmentId, ViewBag.DepartmentList as SelectList, "--select--", new { @class = "form-control" })*@

                    @*        @Html.TextBoxFor(model => model.Address, new { @class = "form-control", @placeholder ="Address" })*@
                    @*<a href="#" id="btnSubmit" class="btn btn-success btn-block">@if(Model.EmployeeId>0){<span>Update</span> }else{<span>Save</span>} </a>*@
                </div>





                <div class="form-group">
                    <div class="col-sm-8 col-sm-offset-2">
                        @*<button class="btn btn-default" type="submit">Cancel</button>*@
                        @*<a href="#" id="btnCreateTeacher" class="btn btn-primary">Save</a>*@
                        <button type="submit" value="Save" id="btnSubmit" class="btn btn-primary"><span class="fa fa-bookmark"></span> Save</button>
                        <button type="button" class="btn btn-primary" onclick="ShowView(1)"><span class="fa fa-plus"></span> Back</button>
                    </div>
                </div>
            </div>
        }
        @*</form>*@
    </div>





    <div class="hr-dashed"></div>
    @*     <h4 style="padding-left:120px;">Qualifications</h4>
        <div class="hr-dashed"></div>*@



<script>

    var AddGrade = function () {
        //debugger
        var myformdata = $("#FrmQA").serialize();

        //if (!$("#FrmANT").valid()) {
        //    return false;
        //}

        $.ajax({

            type: "POST",
            url: "/School/AddSchoolGrade",
            data: myformdata,
            success: function (result) {
                //$("#loaderDiv").hide();
                // $("#myModal").modal("hide");
                if (result != "Exception" && result != "Exits") {
                    debugger
                    //window.location.href = "/Teacher/Create";
                    $("#SchoolId").val(result);

                    //  $('#ResultDIV').load('/Teacher/ShowTeacherQualificatoin', ShowTeacherQualificatoinAction);
                    $('#showgrade').load('/School/ShowSchoolGrade?SchoolId=' + result);
                    $("#SuccesLable").text("Grade Added");
                    // $("#btnAddQualification").prop('value', 'Save');
                    $("#SuccesModel").modal("show");
                }
                else if (result == "Exception") {
                    debugger
                    //$("#ErrorUName").prop('value', 'User Name Already Exits');
                    $("#ErrorLable").text("Exception Error Occurd");
                    //$("#btnAddQualification").prop('value', 'Save');
                    $("#myModal").modal("show");
                }
                else if (result == "Exits") {
                    //$("#ErrorUName").prop('value', 'User Name Already Exits');
                    $("#ErrorLable").text("This Grade is Already Assigned to this School");
                    //$("#btnAddQualification").prop('value', 'Save');
                    $("#myModal").modal("show");


                }
                else {

                }

            }

        })
    }

    var loadGrades = function (value) {
        debugger
        $('#showgrade').load('/School/ShowSchoolGrade?SchoolId=' + value);
    }
</script>

